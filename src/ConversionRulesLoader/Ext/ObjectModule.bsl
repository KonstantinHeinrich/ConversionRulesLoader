
Перем ОбщийФайлПравил;
Перем КаталогИсходныхКодов;
Перем ОписанияПараметров;

#Область ПрограммныйИнтерфейс

Процедура ВыгрузитьПравила(Конвертация, Каталог) Экспорт
	
	ИмяСобранныхПравил = Каталог + "\ПравилаОбменаСобранные.xml";
	КаталогИсходныхКодов = Каталог + "\src\";
	
	ВыгрузкаКонвертации = Обработки.ВыгрузкаКонвертации.Создать();
	ВыгрузкаКонвертации.ИмяФайлаПравил = ИмяСобранныхПравил;
	ВыгрузкаКонвертации.КонвертацияДляВыгрузки = Конвертация;
	ВыгрузкаКонвертации.ВыполнитьВыгрузкуПравил();
	
	ОбщийФайлПравил = Новый COMОбъект("MSXML2.DOMDocument.6.0");
	ОбщийФайлПравил.async = false;
	ОбщийФайлПравил.load(ИмяСобранныхПравил);
	
	ОписанияПараметров = Новый Соответствие;
	ОчиститьКаталогИсходныхКодов();
	ЗаписатьКлючевыеСвойстваПравилОбмена();
	
	Время = Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ:мм");
	Сообщить("Правила '" + Конвертация + "' выгружены в " + Время);
	
КонецПроцедуры

Процедура ЗагрузитьПравила(Конвертация, Каталог) Экспорт
	
	ИмяСобранныхПравил = Каталог + "\ПравилаОбменаСобранные.xml";
	КаталогИсходныхКодов = Каталог + "\src\";
	
	ОбщийФайлПравил = Новый COMОбъект("MSXML2.DOMDocument.6.0");
	ОбщийФайлПравил.async = false;
	
	СобратьКоллекциюОбъектов(ОбщийФайлПравил, КаталогИсходныхКодов);	
	ОбщийФайлПравил.save(ИмяСобранныхПравил);
	
	ЗагрузкаКонвертации = Обработки.ЗагрузкаКонвертации.Создать();
	ЗагрузкаКонвертации.ЗагружаемаяКонвертация = Конвертация;
	ЗагрузкаКонвертации.ЗагрузкаДанныхВОднойТранзакции = Истина;
	ЗагрузкаКонвертации.ИмяФайлаПравилОбмена = ИмяСобранныхПравил;
	ЗагрузкаКонвертации.Источник = Конвертация.Источник;
	ЗагрузкаКонвертации.Приемник = Конвертация.Приемник;
	ЗагрузкаКонвертации.ЗагрузитьПравилаОбмена();
	ЗагрузкаКонвертации.Сохранить(1, Ложь, Ложь);
	
	Время = Формат(ТекущаяДатаСеанса(), "ДФ=ЧЧ:мм");
	Сообщить("Правила '" + Конвертация + "' загружены в " + Время);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭлементЯвляетсяРасширениемОбъекта(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Обработчики Правил конвертации объектов
	МассивЭлементов.Добавить("ПередВыгрузкой");
	МассивЭлементов.Добавить("ПриВыгрузке");
	МассивЭлементов.Добавить("ПослеВыгрузки");
	МассивЭлементов.Добавить("ПослеВыгрузкиВФайл");
	МассивЭлементов.Добавить("ПоследовательностьПолейПоиска");		
	МассивЭлементов.Добавить("ПередЗагрузкой");
	МассивЭлементов.Добавить("ПриЗагрузке");
	МассивЭлементов.Добавить("ПослеЗагрузки");

	// Обработчики Правил конвертации группы свойств
	МассивЭлементов.Добавить("ПередОбработкойВыгрузки");
	МассивЭлементов.Добавить("ПередВыгрузкой");
	МассивЭлементов.Добавить("ПриВыгрузке");
	МассивЭлементов.Добавить("ПослеВыгрузки");
	МассивЭлементов.Добавить("ПослеОбработкиВыгрузки");
	
	// Обработчики Правил выгрузки данных
	МассивЭлементов.Добавить("ПередОбработкойПравила");
	МассивЭлементов.Добавить("ПередВыгрузкойОбъекта");
	МассивЭлементов.Добавить("ПослеВыгрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеОбработкиПравила");
	
	// Обработчики Правил очистки данных
	МассивЭлементов.Добавить("ПередОбработкойПравила");
	МассивЭлементов.Добавить("ПередУдалениемОбъекта");
	МассивЭлементов.Добавить("ПослеОбработкиПравила");
	
	// Текстовое поле алгоритма и запроса
	МассивЭлементов.Добавить("Текст");
	
	// Обработчики Конвертации
	МассивЭлементов.Добавить("ПослеЗагрузкиПравилОбмена");
	МассивЭлементов.Добавить("ПередВыгрузкойДанных");
	МассивЭлементов.Добавить("ПередПолучениемИзмененныхОбъектов");
	МассивЭлементов.Добавить("ПередВыгрузкойОбъекта");
	МассивЭлементов.Добавить("ПередОтправкойИнформацииОбУдалении");
	МассивЭлементов.Добавить("ПередКонвертациейОбъекта");      
	МассивЭлементов.Добавить("ПослеВыгрузкиОбъекта");          
	МассивЭлементов.Добавить("ПослеВыгрузкиДанных");
	МассивЭлементов.Добавить("ПередЗагрузкойДанных");
	МассивЭлементов.Добавить("ПослеЗагрузкиПараметров");
	МассивЭлементов.Добавить("ПослеПолученияИнформацииОбУзлахОбмена");
	МассивЭлементов.Добавить("ПередЗагрузкойОбъекта");
	МассивЭлементов.Добавить("ПриПолученииИнформацииОбУдалении");
	МассивЭлементов.Добавить("ПослеЗагрузкиОбъекта");
	МассивЭлементов.Добавить("ПослеЗагрузкиДанных");
	
	// Обработчики Параметров
	МассивЭлементов.Добавить("ПослеЗагрузкиПараметра");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Функция ЭлементЯвляетсяКоллекцией(Элемент)
	
	Коллекции = Новый Соответствие;

	// Имена элементов-коллекций конревых элементов: Ключ - имя элемента коллекции, Значение - допустимые имена родителельских элементов
	Коллекции.Вставить("Параметры", "ПравилаОбмена");
	Коллекции.Вставить("Обработки", "");
	Коллекции.Вставить("ПравилаКонвертацииОбъектов", "");
	Коллекции.Вставить("ПравилаВыгрузкиДанных", "");
	Коллекции.Вставить("ПравилаОчисткиДанных", "");
	Коллекции.Вставить("Алгоритмы", "");
	Коллекции.Вставить("Запросы",  "");

	// Имена элементов-коллекций внутри Правил
	Коллекции.Вставить("Свойства", "");
	Коллекции.Вставить("Значения", "");

	НайденныйЭлемент = Коллекции.Получить(Элемент.nodeName);
	Если НайденныйЭлемент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НайденныйЭлемент = "" Тогда
		Возврат Истина;
	ИначеЕсли Найти(НайденныйЭлемент, Элемент.parentNode.nodeName) > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СоздаватьКаталогДляКоллекцииЭлементов(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Группа");
	МассивЭлементов.Добавить("Правило");
	
	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;	
	
КонецФункции

#Область ВыгрузкаВФайлы

Процедура ЗаписатьКлючевыеСвойстваПравилОбмена()
	
	ДочерниеЭлементы = ОбщийФайлПравил.documentElement.selectNodes("*");

	Для Каждого Элемент Из ДочерниеЭлементы Цикл

		Если ЭлементЯвляетсяРасширениемОбъекта(Элемент.nodeName) Тогда
			ЗаписатьРасширениеОбъекта(Элемент, КаталогИсходныхКодов, Элемент.nodeName);
		КонецЕсли;
		
		Если ЭлементЯвляетсяКоллекцией(Элемент) Тогда
			РазобратьКоллекциюОбъектов(Элемент, КаталогИсходныхКодов);
		КонецЕсли;		
		
		Если ЭлементНеобходимоОчистить(Элемент.nodeName) Тогда
			Элемент.text = "";
		КонецЕсли;
		
		Если Элемент.nodeName = "ДатаВремяСоздания" Тогда
			Элемент.text = "0001-01-01T00:00:00";
		КонецЕсли;
		
	КонецЦикла;

	ОбщийФайлПравил.save(КаталогИсходныхКодов + "ПравилаОбмена.xml");

КонецПроцедуры

Процедура РазобратьКоллекциюОбъектов(ИсходныйЭлемент, ИсходныйКаталог)
	
	Если Не ИсходныйЭлемент.hasChildNodes() Тогда
		Возврат;
	КонецЕсли;

	Если ИсходныйЭлемент.nodeName = "Группа" 
		Или ИсходныйЭлемент.nodeName = "Правило" Тогда
		
		ПутьКИмениЭлементаКоллекции = "Код";
		
		ИмяЭлементаКоллекции = ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text;
		Если ИсходныйЭлемент.nodeName = "Группа" Тогда
			Наименование = СтрЗаменить(ИсходныйЭлемент.SelectSingleNode("Наименование").text, ">", "");
			Если ИмяЭлементаКоллекции <> Наименование Тогда
				ИмяЭлементаКоллекции = ИмяЭлементаКоллекции + " " + Наименование;
			КонецЕсли;
		КонецЕсли; 

	ИначеЕсли ИсходныйЭлемент.nodeName = "Свойство" 
		Или ИсходныйЭлемент.nodeName = "Значение" Тогда
		
		ПутьКИмениЭлементаКоллекции = "Код";
		Наименование = СтрЗаменить(ИсходныйЭлемент.SelectSingleNode("Наименование").text, ">", "");
		ИмяЭлементаКоллекции = ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + " " + Наименование;
		
	ИначеЕсли ИсходныйЭлемент.nodeName = "Алгоритмы"
		Или ИсходныйЭлемент.nodeName = "Запросы" 
		Или ИсходныйЭлемент.nodeName = "Параметры" Тогда

		ПутьКИмениЭлементаКоллекции = "@Имя";
		ИмяЭлементаКоллекции = ИсходныйЭлемент.nodeName;
		                                  		
	ИначеЕсли ИсходныйЭлемент.nodeName = "Алгоритм" 
		Или ИсходныйЭлемент.nodeName = "Запрос" 
		Или ИсходныйЭлемент.nodeName = "Параметр" Тогда

		ПутьКИмениЭлементаКоллекции = "@Имя";
		ИмяЭлементаКоллекции = ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text;
		
	Иначе
		
		ПутьКИмениЭлементаКоллекции = "";
		ИмяЭлементаКоллекции = ИсходныйЭлемент.nodeName;
		
	КонецЕсли;
	
	КаталогКоллекции = ИсходныйКаталог + ИмяЭлементаКоллекции + "\";
	СоздатьКаталог(КаталогКоллекции);
	
	ДочерниеЭлементы = ИсходныйЭлемент.selectNodes("*");
	Для Каждого Элемент Из ДочерниеЭлементы Цикл
		
		Если ЭлементЯвляетсяРасширениемОбъекта(Элемент.nodeName) Тогда
			Если Элемент.nodeName = "Текст" Тогда
				ИмяФайла = Элемент.parentNode.SelectSingleNode("@Имя").text;
			Иначе
				ИмяФайла = Элемент.nodeName;
			КонецЕсли;
			ЗаписатьРасширениеОбъекта(Элемент, КаталогКоллекции, ИмяФайла);
		КонецЕсли;
		
		Если ЭлементСодержитДанныеИлиДочерниеКоллекции(Элемент.nodeName) Тогда
			Если СоздаватьКаталогДляКоллекцииЭлементов(Элемент.nodeName) Тогда
				РазобратьКоллекциюОбъектов(Элемент, КаталогКоллекции + Элемент.nodeName + "\");
			Иначе
				РазобратьКоллекциюОбъектов(Элемент, КаталогКоллекции);
			КонецЕсли;
		КонецЕсли;		
		
		Если ЭлементЗаписываетсяОтдельно(Элемент.nodeName) Тогда
			ЗаписатьЭлементВФайл(Элемент, КаталогКоллекции + Элемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + ".xml");
		КонецЕсли;		
		
		Если ЭлементЯвляетсяКоллекцией(Элемент) Тогда
			РазобратьКоллекциюОбъектов(Элемент, КаталогКоллекции);
		КонецЕсли;		

	КонецЦикла;
	
	Если Не ИсходныйЭлемент.hasChildNodes() Тогда
		Возврат;
	КонецЕсли;
		
	ЗаписатьЭлементВФайл(ИсходныйЭлемент, ИсходныйКаталог + ИмяЭлементаКоллекции + ".xml");

КонецПроцедуры

Процедура ЗаписатьРасширениеОбъекта(Элемент, ИсходныйКаталог, ИмяФайла, РасширениеФайла = "bsl")
	
	КаталогРасширений = ИсходныйКаталог + "Ext\";
	СоздатьКаталог(КаталогРасширений);
	Содержание = Элемент.text;
	
	ЗаписьТекста = Новый ЗаписьТекста(КаталогРасширений + ИмяФайла + "." + РасширениеФайла);
	
	Если ДобавлятьОписаниеПараметровВКодОбработчиков И Элемент.parentNode.nodeName <> "Алгоритм" Тогда
		ДобавитьОписаниеПараметров(Содержание, Элемент, ИмяФайла);
	КонецЕсли; 
	
	ЗаписьТекста.ЗаписатьСтроку(Содержание);
	ЗаписьТекста.Закрыть();
	
	Элемент.text = "";

КонецПроцедуры

Процедура ДобавитьОписаниеПараметров(Содержание, Элемент, ИмяФайла)
	
	ИмяОбласти = "#Область Параметры";
	Если Лев(Содержание, СтрДлина(ИмяОбласти)) = ИмяОбласти Тогда
		Позиц = Найти(Содержание, "#КонецОбласти") + СтрДлина("#КонецОбласти") + 2;
		Содержание = Сред(Содержание, Позиц);
	КонецЕсли;
		
	ИмяТиповПравил = Новый Массив;
	ИмяТиповПравил.Добавить("ПравилаКонвертацииОбъектов");
	ИмяТиповПравил.Добавить("ПравилаВыгрузкиДанных");
	ИмяТиповПравил.Добавить("ПравилаОчисткиДанных");
	
	Родитель = Элемент.parentNode;
	Если Родитель.nodeName = "Правило" Тогда			
		Пока Родитель.nodeName <> "#document" Цикл
			Если ИмяТиповПравил.Найти(Родитель.nodeName) <> Неопределено Тогда
				ИмяМакета = Родитель.nodeName;
				Прервать;
			КонецЕсли;
			Родитель = Родитель.parentNode;
		КонецЦикла;
	КонецЕсли;
	ИмяМакета = Родитель.nodeName + "_" + ИмяФайла;
	
	ОбластьПараметры = ОписанияПараметров[ИмяМакета];
	Если ОбластьПараметры = Неопределено Тогда
		Попытка
			ОбластьПараметры = ПолучитьМакет(ИмяМакета).ПолучитьТекст();
			ОписанияПараметров.Вставить(ИмяМакета, ОбластьПараметры);
		Исключение
			Сообщить("Не найдено описание параметров: " + ИмяМакета, СтатусСообщения.Важное);
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбластьПараметры) Тогда
		Содержание = ОбластьПараметры + Символы.ПС + Символы.ПС + Содержание;
	КонецЕсли;
		    
КонецПроцедуры

Процедура ЗаписатьЭлементВФайл(Элемент, ИмяФайла)

		ЭлементыКоллекции = Новый COMОбъект("MSXML2.DOMDocument.6.0");
		ЭлементыКоллекции.async = false;
		ЭлементыКоллекции.appendChild(Элемент);
		ЭлементыКоллекции.save(ИмяФайла);

КонецПроцедуры

Функция ЭлементСодержитДанныеИлиДочерниеКоллекции(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Имена элементов-коллекций внутри Правил
	МассивЭлементов.Добавить("Группа");
	МассивЭлементов.Добавить("Правило");
	МассивЭлементов.Добавить("Свойство");
	МассивЭлементов.Добавить("Значение");
	
	МассивЭлементов.Добавить("Алгоритм");
	МассивЭлементов.Добавить("Запрос");

	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Функция ЭлементЗаписываетсяОтдельно(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Параметр");
	
	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

Процедура ОчиститьКаталогИсходныхКодов() Экспорт
	
	МассивФайлов = НайтиФайлы(КаталогИсходныхКодов, "*.*", Истина);
	ЧислоФайлов = МассивФайлов.ВГраница();

	// Удаление файлов и каталогов происходит в обратном порядке, чтобы избежать ошибки при удалении непустого каталога
	Для й = 1 По ЧислоФайлов Цикл
		УдалитьФайлы(МассивФайлов[ЧислоФайлов - й].ПолноеИмя);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭлементНеобходимоОчистить(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Ид");
	МассивЭлементов.Добавить("Наименование");
	//МассивЭлементов.Добавить("ДатаВремяСоздания");
	
	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзФайлов

Процедура СобратьКоллекциюОбъектов(ИсходныйЭлемент, КаталогРодителя)
	
	КаталогРодителяНаДиске = Новый Файл(КаталогРодителя);
	Если Не КаталогРодителяНаДиске.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	КаталогГруппыПравил = Новый Файл(КаталогРодителя + "Группа\");
	Если КаталогГруппыПравил.Существует() Тогда
		СобратьКоллекциюОбъектов(ИсходныйЭлемент, КаталогРодителя + "Группа\");
	КонецЕсли;

	КаталогГруппаПравил = Новый Файл(КаталогРодителя + "Правило\");
	Если КаталогГруппаПравил.Существует() Тогда
		СобратьКоллекциюОбъектов(ИсходныйЭлемент, КаталогРодителя + "Правило\");
	КонецЕсли;

	НайденныеФайлы = НайтиФайлы(КаталогРодителя, "*.xml");
	Для Каждого Файл Из НайденныеФайлы Цикл
		
		ДобавляемыйЭлемент = ПрочитатьЭлементИзФайла(Файл.ПолноеИмя);
		Если ДобавляемыйЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ИсходныйЭлемент.appendChild(ДобавляемыйЭлемент);
		
		ДочерниеЭлементы = ДобавляемыйЭлемент.selectNodes("*");
		Для Каждого Элемент Из ДочерниеЭлементы Цикл
			
			КаталогКоллекции = КаталогКоллекции(КаталогРодителя + ДополнительныйКаталогЭлемента(ДобавляемыйЭлемент), Элемент);
			
			Если ЭлементЯвляетсяРасширениемОбъекта(Элемент.nodeName) Тогда
				Если Элемент.nodeName = "Текст" Тогда
					ИмяФайла = Элемент.parentNode.SelectSingleNode("@Имя").text;
				Иначе
					ИмяФайла = Элемент.nodeName;
				КонецЕсли;
				Если ПустаяСтрока(Элемент.text) Тогда
					ДобавитьРасширениеОбъекта(Элемент.text, КаталогКоллекции, ИмяФайла);
				КонецЕсли; 
			КонецЕсли;
			
			Если ЭлементЯвляетсяКоллекцией(Элемент) Тогда
				СобратьКоллекциюОбъектов(Элемент, КаталогКоллекции);
			КонецЕсли;		

		КонецЦикла;
		
		Если ЭлементСодержитДочерниеКоллекции(ДобавляемыйЭлемент.nodeName) Тогда
			КаталогКоллекции = КаталогКоллекции(КаталогРодителя + ДополнительныйКаталогЭлемента(ДобавляемыйЭлемент), Элемент);
			СобратьКоллекциюОбъектов(ДобавляемыйЭлемент, КаталогКоллекции);
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ДобавитьРасширениеОбъекта(Содержание, ИсходныйКаталог, ИмяФайла, РасширениеФайла = "bsl")
	
	КаталогРасширений = ИсходныйКаталог + "Ext\";
	
	ЧтениеТекста = Новый ЧтениеТекста(КаталогРасширений + ИмяФайла + "." + РасширениеФайла);
	СодержимоеФайла = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Если СодержимоеФайла <> Неопределено Тогда
		Содержание = СодержимоеФайла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьЭлементИзФайла(ИмяФайла)

	ЭлементыКоллекции = Новый COMОбъект("MSXML2.DOMDocument.6.0");
	ЭлементыКоллекции.async = false;
	ЭлементыКоллекции.load(ИмяФайла);
	
	Возврат ЭлементыКоллекции.documentElement;
	
КонецФункции

Функция КаталогКоллекции(ИсходныйКаталог, ИсходныйЭлемент)

	Если ИсходныйЭлемент.nodeName = "Свойства" Или ИсходныйЭлемент.nodeName = "Значения" 
		Или ИсходныйЭлемент.nodeName = "Параметры" Или ИсходныйЭлемент.nodeName = "Обработки" 
		Или ИсходныйЭлемент.nodeName = "ПравилаКонвертацииОбъектов" 
		Или ИсходныйЭлемент.nodeName = "ПравилаВыгрузкиДанных" 
		Или ИсходныйЭлемент.nodeName = "ПравилаОчисткиДанных" 
		Или ИсходныйЭлемент.nodeName = "Алгоритмы" Или ИсходныйЭлемент.nodeName = "Запросы" Тогда

		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.nodeName + "\";
		
	ИначеЕсли ИсходныйЭлемент.nodeName = "Алгоритм" 
		Или ИсходныйЭлемент.nodeName = "Запрос" 
		Или ИсходныйЭлемент.nodeName = "Параметр" Тогда

		ПутьКИмениЭлементаКоллекции = "@Имя";
		КаталогКоллекции = ИсходныйКаталог + ИсходныйЭлемент.SelectSingleNode(ПутьКИмениЭлементаКоллекции).text + "\";
		
	Иначе
		КаталогКоллекции = ИсходныйКаталог;
		ПутьКИмениЭлементаКоллекции = "";
	КонецЕсли;
	
	Возврат КаталогКоллекции;

КонецФункции

Функция ДополнительныйКаталогЭлемента(Элемент)
	
	КаталогЭлемента = "";
	
	Если Элемент.nodeName = "Правило" Или Элемент.nodeName = "Группа" Тогда
		
		ИмяЭлементаКоллекции = Элемент.SelectSingleNode("Код").text;
		Если Элемент.nodeName = "Группа" Тогда
			Наименование = СтрЗаменить(Элемент.SelectSingleNode("Наименование").text, ">", "");
			Если ИмяЭлементаКоллекции <> Наименование Тогда
				ИмяЭлементаКоллекции = ИмяЭлементаКоллекции + " " + Наименование;
			КонецЕсли;
		КонецЕсли;
		КаталогЭлемента = ИмяЭлементаКоллекции + "\";		
		
	ИначеЕсли Элемент.nodeName = "Алгоритм" Или Элемент.nodeName = "Запрос" Или Элемент.nodeName = "Параметр" Тогда

		КаталогЭлемента = Элемент.SelectSingleNode("@Имя").text + "\";
		
	ИначеЕсли Элемент.nodeName = "Свойство" Или Элемент.nodeName = "Значение" Тогда
		
		Наименование = СтрЗаменить(Элемент.SelectSingleNode("Наименование").text, ">", "");
		КаталогЭлемента = Элемент.SelectSingleNode("Код").text + " " + Наименование + "\";
		
	КонецЕсли;
	
	Возврат КаталогЭлемента;
		
КонецФункции

Функция ЭлементСодержитДочерниеКоллекции(ИмяСвойства)
	
	МассивЭлементов = Новый Массив;

	// Имена элементов-коллекций внутри Правил
	МассивЭлементов.Добавить("Группа");
	
	Возврат МассивЭлементов.Найти(ИмяСвойства) <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
